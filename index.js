const { 
    Telegraf, Markup 
} = require('telegraf')
require('dotenv').config()
const helpersText = require('./const')
const botName = '–ü–æ–º–æ—â–Ω–∏–∫'

const bot = new Telegraf(process.env.BOT_TOKEN)
bot.start((ctx) => ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}üëã! 
–ú–µ–Ω—è –∑–æ–≤—É—Ç ${botName} , —è –ø–æ–º–æ–≥–∞—é –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é Pavel , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /about_me –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç(CV) –∏ —Ç–∞–∫–∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)–•–æ—Ä–æ—à–µ–≥–æ –î–Ω—è üëç
    `) 
    )
bot.help((ctx) => ctx.reply(helpersText.command))

bot.command('about_me' , async (ctx) => {
    try {
        await ctx.replyWithHTML('<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—Å—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ</b>' , Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å CV File', 'btn_1')],
                [Markup.button.callback('–ü—Ä–∏–º–µ—Ä –†–∞–±–æ—Ç—ã 1', 'btn_2')],
                [Markup.button.callback('–ü—Ä–∏–º–µ—Ä –†–∞–±–æ—Ç—ã 2', 'btn_3')],
                [Markup.button.callback('–ü—Ä–∏–º–µ—Ä –†–∞–±–æ—Ç—ã 3', 'btn_4')]
            ]
        ))
    } catch(e){
        console.error(e)
    }
    
})
function addActionBotDocument(name , src , text ){
    bot.action(name , async (ctx) =>{
        try {
            await ctx.answerCbQuery()
            if(src !== false){
                await ctx.replyWithDocument({
                    source: src
                })
            }
            await ctx.replyWithHTML(text , {
                disable_web_page_preview: true
            })
        }catch (e){
            console.error(e)
        }
    })
}
function addActionBotPhoto(name , src , text ){
    bot.action(name , async (ctx) =>{
        try {
            await ctx.answerCbQuery()
            if(src !== false){
                await ctx.replyWithPhoto({
                    source: src
                }) 
            }
            await ctx.replyWithHTML(text , {
                disable_web_page_preview: true
            })
        }catch (e){
            console.error(e)
        }
    })
}

addActionBotDocument('btn_1', './document/CV_Pavel_Chipula.docx' , helpersText.text1)
addActionBotPhoto('btn_2', './img/photoAltSite.png' , helpersText.text2)
addActionBotPhoto('btn_3', './img/photoOglobinSite.png' , helpersText.text3)
addActionBotPhoto('btn_4', './img/photoStartupSite.png' , helpersText.text4)

bot.hears('–ò–∑—è' , (ctx) => {
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç –ò–∑—è ,${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}  ${ctx.message.from.bot ? "–±–æ—Ç": "–Ω–µ –±–æ—Ç"}`)
})

bot.on('message', (ctx) =>{
    ctx.deleteMessage()
    ctx.reply(`${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'} –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—É /help ü§ó)` + `–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ${ctx.message.text} –µ—â–µ –Ω–µ—Ç—É üò¢`)
}) 


bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))